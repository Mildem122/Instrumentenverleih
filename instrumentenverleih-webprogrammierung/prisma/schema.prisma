// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_HEROKU")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Instrument {
  id                 String           @id @default(cuid())
  name               String
  playingTechnique   PlayingTechnique @relation(fields: [playingTechniqueId], references: [id])
  pictureURL         String
  description        String
  playingTechniqueId String
  Devices            Device[]
}

model Device {
  id               String        @id @default(cuid())
  pictureUrl       String
  description      String
  modelName        String
  instrumentId     String
  price            String
  size             String?
  fingering        String?
  isAvailable      Boolean       @default(false)
  instrumentType   Instrument    @relation(fields: [instrumentId], references: [id])
  availableDevices Int?
  Orders           Order[]
  manufacturer     Manufacturer? @relation(fields: [manufacturerId], references: [id])
  manufacturerId   String?
  tone             String?
}

model PlayingTechnique {
  id                   String       @id @default(cuid())
  playingTechniqueText String
  listedInstruments    Instrument[]
}

model Manufacturer {
  id      String   @id @default(cuid())
  name    String
  country String
  Device  Device[]
}

model Order {
  user          User     @relation(fields: [userId], references: [id])
  device        Device   @relation(fields: [deviceId], references: [id])
  deviceId      String
  borrowedFrom  String
  borrowedUntil String
  orderDate     DateTime @default(now())
  price         String?
  paymentMethod String?

  orderId String @id
  userId  String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  adress        String?
  accounts      Account[]
  sessions      Session[]
  Order         Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
